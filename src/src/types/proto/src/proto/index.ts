// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: src/proto/index.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

/** Payloads */
export interface GetZonePayload {
  id: string;
}

export interface GetLanguagePayload {
  id: string;
}

export interface GetChurchLanguagePayload {
  id: string;
}

export interface GetCountryPayload {
  id: string;
}

export interface GetPoliticalStatePayload {
  id: string;
}

export interface GetChurchStatePayload {
  id: string;
}

export interface GetRegionPayload {
  id: string;
}

export interface GetGroupPayload {
  id: string;
}

export interface GetDistrictPayload {
  id: string;
}

export interface GetLGAPayload {
  id: string;
}

/** Responses */
export interface GetZoneResponse {
  zone?: Zone | undefined;
}

export interface GetLanguageResponse {
  language?: Language | undefined;
}

export interface GetChurchLanguageResponse {
  church_language?: ChurchLanguage | undefined;
}

export interface GetCountryResponse {
  country?: Country | undefined;
}

export interface GetPoliticalStateResponse {
  political_state?: PoliticalState | undefined;
}

export interface GetChurchStateResponse {
  church_state?: ChurchState | undefined;
}

export interface GetRegionResponse {
  region?: Region | undefined;
}

export interface GetGroupResponse {
  group?: Group | undefined;
}

export interface GetDistrictResponse {
  district?: District | undefined;
}

export interface GetLGAResponse {
  lga?: LGA | undefined;
}

/** Entity Messages */
export interface Zone {
  id: string;
  name: string;
  currency: string;
}

export interface Language {
  id: string;
  name: string;
}

export interface ChurchLanguage {
  id: string;
  name: string;
}

export interface Country {
  id: string;
  name: string;
  zone_id: string;
  code: string;
  flag: string;
}

export interface PoliticalState {
  id: string;
  name: string;
  country_id: string;
}

export interface ChurchState {
  id: string;
  name: string;
  country_id: string;
  state_country_id: number;
}

export interface LGA {
  id: string;
  name: string;
  state_id: string;
}

export interface Region {
  id: string;
  name: string;
  church_state_id: string;
  region_state_id: number;
}

export interface Group {
  id: string;
  name: string;
  region_id: string;
  group_region_id: number;
}

export interface District {
  id: string;
  name: string;
  group_id: string;
  district_group_id: number;
}

function createBaseGetZonePayload(): GetZonePayload {
  return { id: "" };
}

export const GetZonePayload: MessageFns<GetZonePayload> = {
  encode(message: GetZonePayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetZonePayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetZonePayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetLanguagePayload(): GetLanguagePayload {
  return { id: "" };
}

export const GetLanguagePayload: MessageFns<GetLanguagePayload> = {
  encode(message: GetLanguagePayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLanguagePayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLanguagePayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetChurchLanguagePayload(): GetChurchLanguagePayload {
  return { id: "" };
}

export const GetChurchLanguagePayload: MessageFns<GetChurchLanguagePayload> = {
  encode(message: GetChurchLanguagePayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetChurchLanguagePayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetChurchLanguagePayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetCountryPayload(): GetCountryPayload {
  return { id: "" };
}

export const GetCountryPayload: MessageFns<GetCountryPayload> = {
  encode(message: GetCountryPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCountryPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCountryPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetPoliticalStatePayload(): GetPoliticalStatePayload {
  return { id: "" };
}

export const GetPoliticalStatePayload: MessageFns<GetPoliticalStatePayload> = {
  encode(message: GetPoliticalStatePayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPoliticalStatePayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPoliticalStatePayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetChurchStatePayload(): GetChurchStatePayload {
  return { id: "" };
}

export const GetChurchStatePayload: MessageFns<GetChurchStatePayload> = {
  encode(message: GetChurchStatePayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetChurchStatePayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetChurchStatePayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetRegionPayload(): GetRegionPayload {
  return { id: "" };
}

export const GetRegionPayload: MessageFns<GetRegionPayload> = {
  encode(message: GetRegionPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRegionPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRegionPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetGroupPayload(): GetGroupPayload {
  return { id: "" };
}

export const GetGroupPayload: MessageFns<GetGroupPayload> = {
  encode(message: GetGroupPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGroupPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGroupPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetDistrictPayload(): GetDistrictPayload {
  return { id: "" };
}

export const GetDistrictPayload: MessageFns<GetDistrictPayload> = {
  encode(message: GetDistrictPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDistrictPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDistrictPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetLGAPayload(): GetLGAPayload {
  return { id: "" };
}

export const GetLGAPayload: MessageFns<GetLGAPayload> = {
  encode(message: GetLGAPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLGAPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLGAPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetZoneResponse(): GetZoneResponse {
  return {};
}

export const GetZoneResponse: MessageFns<GetZoneResponse> = {
  encode(message: GetZoneResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.zone !== undefined) {
      Zone.encode(message.zone, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetZoneResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetZoneResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.zone = Zone.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetLanguageResponse(): GetLanguageResponse {
  return {};
}

export const GetLanguageResponse: MessageFns<GetLanguageResponse> = {
  encode(message: GetLanguageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== undefined) {
      Language.encode(message.language, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLanguageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLanguageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.language = Language.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetChurchLanguageResponse(): GetChurchLanguageResponse {
  return {};
}

export const GetChurchLanguageResponse: MessageFns<GetChurchLanguageResponse> = {
  encode(message: GetChurchLanguageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.church_language !== undefined) {
      ChurchLanguage.encode(message.church_language, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetChurchLanguageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetChurchLanguageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.church_language = ChurchLanguage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetCountryResponse(): GetCountryResponse {
  return {};
}

export const GetCountryResponse: MessageFns<GetCountryResponse> = {
  encode(message: GetCountryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.country !== undefined) {
      Country.encode(message.country, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCountryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCountryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.country = Country.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetPoliticalStateResponse(): GetPoliticalStateResponse {
  return {};
}

export const GetPoliticalStateResponse: MessageFns<GetPoliticalStateResponse> = {
  encode(message: GetPoliticalStateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.political_state !== undefined) {
      PoliticalState.encode(message.political_state, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPoliticalStateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPoliticalStateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.political_state = PoliticalState.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetChurchStateResponse(): GetChurchStateResponse {
  return {};
}

export const GetChurchStateResponse: MessageFns<GetChurchStateResponse> = {
  encode(message: GetChurchStateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.church_state !== undefined) {
      ChurchState.encode(message.church_state, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetChurchStateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetChurchStateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.church_state = ChurchState.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetRegionResponse(): GetRegionResponse {
  return {};
}

export const GetRegionResponse: MessageFns<GetRegionResponse> = {
  encode(message: GetRegionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.region !== undefined) {
      Region.encode(message.region, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRegionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRegionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.region = Region.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetGroupResponse(): GetGroupResponse {
  return {};
}

export const GetGroupResponse: MessageFns<GetGroupResponse> = {
  encode(message: GetGroupResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.group !== undefined) {
      Group.encode(message.group, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGroupResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGroupResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.group = Group.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetDistrictResponse(): GetDistrictResponse {
  return {};
}

export const GetDistrictResponse: MessageFns<GetDistrictResponse> = {
  encode(message: GetDistrictResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.district !== undefined) {
      District.encode(message.district, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDistrictResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDistrictResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.district = District.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetLGAResponse(): GetLGAResponse {
  return {};
}

export const GetLGAResponse: MessageFns<GetLGAResponse> = {
  encode(message: GetLGAResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lga !== undefined) {
      LGA.encode(message.lga, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLGAResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLGAResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.lga = LGA.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseZone(): Zone {
  return { id: "", name: "", currency: "" };
}

export const Zone: MessageFns<Zone> = {
  encode(message: Zone, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.currency !== "") {
      writer.uint32(26).string(message.currency);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Zone {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseZone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseLanguage(): Language {
  return { id: "", name: "" };
}

export const Language: MessageFns<Language> = {
  encode(message: Language, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Language {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLanguage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseChurchLanguage(): ChurchLanguage {
  return { id: "", name: "" };
}

export const ChurchLanguage: MessageFns<ChurchLanguage> = {
  encode(message: ChurchLanguage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChurchLanguage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChurchLanguage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCountry(): Country {
  return { id: "", name: "", zone_id: "", code: "", flag: "" };
}

export const Country: MessageFns<Country> = {
  encode(message: Country, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.zone_id !== "") {
      writer.uint32(26).string(message.zone_id);
    }
    if (message.code !== "") {
      writer.uint32(34).string(message.code);
    }
    if (message.flag !== "") {
      writer.uint32(42).string(message.flag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Country {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCountry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.zone_id = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.flag = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBasePoliticalState(): PoliticalState {
  return { id: "", name: "", country_id: "" };
}

export const PoliticalState: MessageFns<PoliticalState> = {
  encode(message: PoliticalState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.country_id !== "") {
      writer.uint32(26).string(message.country_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PoliticalState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePoliticalState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.country_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseChurchState(): ChurchState {
  return { id: "", name: "", country_id: "", state_country_id: 0 };
}

export const ChurchState: MessageFns<ChurchState> = {
  encode(message: ChurchState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.country_id !== "") {
      writer.uint32(26).string(message.country_id);
    }
    if (message.state_country_id !== 0) {
      writer.uint32(32).uint64(message.state_country_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChurchState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChurchState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.country_id = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.state_country_id = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseLGA(): LGA {
  return { id: "", name: "", state_id: "" };
}

export const LGA: MessageFns<LGA> = {
  encode(message: LGA, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.state_id !== "") {
      writer.uint32(26).string(message.state_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LGA {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLGA();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.state_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseRegion(): Region {
  return { id: "", name: "", church_state_id: "", region_state_id: 0 };
}

export const Region: MessageFns<Region> = {
  encode(message: Region, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.church_state_id !== "") {
      writer.uint32(26).string(message.church_state_id);
    }
    if (message.region_state_id !== 0) {
      writer.uint32(32).uint64(message.region_state_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Region {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.church_state_id = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.region_state_id = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGroup(): Group {
  return { id: "", name: "", region_id: "", group_region_id: 0 };
}

export const Group: MessageFns<Group> = {
  encode(message: Group, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.region_id !== "") {
      writer.uint32(26).string(message.region_id);
    }
    if (message.group_region_id !== 0) {
      writer.uint32(32).uint64(message.group_region_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Group {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.region_id = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.group_region_id = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseDistrict(): District {
  return { id: "", name: "", group_id: "", district_group_id: 0 };
}

export const District: MessageFns<District> = {
  encode(message: District, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.group_id !== "") {
      writer.uint32(26).string(message.group_id);
    }
    if (message.district_group_id !== 0) {
      writer.uint32(32).uint64(message.district_group_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): District {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDistrict();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.group_id = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.district_group_id = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface LocationServiceClient {
  getZone(request: GetZonePayload, metadata?: Metadata): Observable<GetZoneResponse>;

  getLanguage(request: GetLanguagePayload, metadata?: Metadata): Observable<GetLanguageResponse>;

  getChurchLanguage(request: GetLanguagePayload, metadata?: Metadata): Observable<GetChurchLanguageResponse>;

  getCountry(request: GetCountryPayload, metadata?: Metadata): Observable<GetCountryResponse>;

  getPoliticalState(request: GetPoliticalStatePayload, metadata?: Metadata): Observable<GetPoliticalStateResponse>;

  getChurchState(request: GetChurchStatePayload, metadata?: Metadata): Observable<GetChurchStateResponse>;

  getRegion(request: GetRegionPayload, metadata?: Metadata): Observable<GetRegionResponse>;

  getGroup(request: GetGroupPayload, metadata?: Metadata): Observable<GetGroupResponse>;

  getDistrict(request: GetDistrictPayload, metadata?: Metadata): Observable<GetDistrictResponse>;

  getLga(request: GetLGAPayload, metadata?: Metadata): Observable<GetLGAResponse>;
}

export interface LocationServiceController {
  getZone(
    request: GetZonePayload,
    metadata?: Metadata,
  ): Promise<GetZoneResponse> | Observable<GetZoneResponse> | GetZoneResponse;

  getLanguage(
    request: GetLanguagePayload,
    metadata?: Metadata,
  ): Promise<GetLanguageResponse> | Observable<GetLanguageResponse> | GetLanguageResponse;

  getChurchLanguage(
    request: GetLanguagePayload,
    metadata?: Metadata,
  ): Promise<GetChurchLanguageResponse> | Observable<GetChurchLanguageResponse> | GetChurchLanguageResponse;

  getCountry(
    request: GetCountryPayload,
    metadata?: Metadata,
  ): Promise<GetCountryResponse> | Observable<GetCountryResponse> | GetCountryResponse;

  getPoliticalState(
    request: GetPoliticalStatePayload,
    metadata?: Metadata,
  ): Promise<GetPoliticalStateResponse> | Observable<GetPoliticalStateResponse> | GetPoliticalStateResponse;

  getChurchState(
    request: GetChurchStatePayload,
    metadata?: Metadata,
  ): Promise<GetChurchStateResponse> | Observable<GetChurchStateResponse> | GetChurchStateResponse;

  getRegion(
    request: GetRegionPayload,
    metadata?: Metadata,
  ): Promise<GetRegionResponse> | Observable<GetRegionResponse> | GetRegionResponse;

  getGroup(
    request: GetGroupPayload,
    metadata?: Metadata,
  ): Promise<GetGroupResponse> | Observable<GetGroupResponse> | GetGroupResponse;

  getDistrict(
    request: GetDistrictPayload,
    metadata?: Metadata,
  ): Promise<GetDistrictResponse> | Observable<GetDistrictResponse> | GetDistrictResponse;

  getLga(
    request: GetLGAPayload,
    metadata?: Metadata,
  ): Promise<GetLGAResponse> | Observable<GetLGAResponse> | GetLGAResponse;
}

export function LocationServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getZone",
      "getLanguage",
      "getChurchLanguage",
      "getCountry",
      "getPoliticalState",
      "getChurchState",
      "getRegion",
      "getGroup",
      "getDistrict",
      "getLga",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("LocationService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("LocationService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const LOCATION_SERVICE_NAME = "LocationService";

export type LocationServiceService = typeof LocationServiceService;
export const LocationServiceService = {
  getZone: {
    path: "/location.LocationService/GetZone",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetZonePayload): Buffer => Buffer.from(GetZonePayload.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetZonePayload => GetZonePayload.decode(value),
    responseSerialize: (value: GetZoneResponse): Buffer => Buffer.from(GetZoneResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetZoneResponse => GetZoneResponse.decode(value),
  },
  getLanguage: {
    path: "/location.LocationService/GetLanguage",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetLanguagePayload): Buffer => Buffer.from(GetLanguagePayload.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetLanguagePayload => GetLanguagePayload.decode(value),
    responseSerialize: (value: GetLanguageResponse): Buffer => Buffer.from(GetLanguageResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetLanguageResponse => GetLanguageResponse.decode(value),
  },
  getChurchLanguage: {
    path: "/location.LocationService/GetChurchLanguage",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetLanguagePayload): Buffer => Buffer.from(GetLanguagePayload.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetLanguagePayload => GetLanguagePayload.decode(value),
    responseSerialize: (value: GetChurchLanguageResponse): Buffer =>
      Buffer.from(GetChurchLanguageResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetChurchLanguageResponse => GetChurchLanguageResponse.decode(value),
  },
  getCountry: {
    path: "/location.LocationService/GetCountry",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetCountryPayload): Buffer => Buffer.from(GetCountryPayload.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetCountryPayload => GetCountryPayload.decode(value),
    responseSerialize: (value: GetCountryResponse): Buffer => Buffer.from(GetCountryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetCountryResponse => GetCountryResponse.decode(value),
  },
  getPoliticalState: {
    path: "/location.LocationService/GetPoliticalState",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetPoliticalStatePayload): Buffer =>
      Buffer.from(GetPoliticalStatePayload.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetPoliticalStatePayload => GetPoliticalStatePayload.decode(value),
    responseSerialize: (value: GetPoliticalStateResponse): Buffer =>
      Buffer.from(GetPoliticalStateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetPoliticalStateResponse => GetPoliticalStateResponse.decode(value),
  },
  getChurchState: {
    path: "/location.LocationService/GetChurchState",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetChurchStatePayload): Buffer =>
      Buffer.from(GetChurchStatePayload.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetChurchStatePayload => GetChurchStatePayload.decode(value),
    responseSerialize: (value: GetChurchStateResponse): Buffer =>
      Buffer.from(GetChurchStateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetChurchStateResponse => GetChurchStateResponse.decode(value),
  },
  getRegion: {
    path: "/location.LocationService/GetRegion",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetRegionPayload): Buffer => Buffer.from(GetRegionPayload.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetRegionPayload => GetRegionPayload.decode(value),
    responseSerialize: (value: GetRegionResponse): Buffer => Buffer.from(GetRegionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetRegionResponse => GetRegionResponse.decode(value),
  },
  getGroup: {
    path: "/location.LocationService/GetGroup",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetGroupPayload): Buffer => Buffer.from(GetGroupPayload.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetGroupPayload => GetGroupPayload.decode(value),
    responseSerialize: (value: GetGroupResponse): Buffer => Buffer.from(GetGroupResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetGroupResponse => GetGroupResponse.decode(value),
  },
  getDistrict: {
    path: "/location.LocationService/GetDistrict",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetDistrictPayload): Buffer => Buffer.from(GetDistrictPayload.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetDistrictPayload => GetDistrictPayload.decode(value),
    responseSerialize: (value: GetDistrictResponse): Buffer => Buffer.from(GetDistrictResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetDistrictResponse => GetDistrictResponse.decode(value),
  },
  getLga: {
    path: "/location.LocationService/GetLGA",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetLGAPayload): Buffer => Buffer.from(GetLGAPayload.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetLGAPayload => GetLGAPayload.decode(value),
    responseSerialize: (value: GetLGAResponse): Buffer => Buffer.from(GetLGAResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetLGAResponse => GetLGAResponse.decode(value),
  },
} as const;

export interface LocationServiceServer extends UntypedServiceImplementation {
  getZone: handleUnaryCall<GetZonePayload, GetZoneResponse>;
  getLanguage: handleUnaryCall<GetLanguagePayload, GetLanguageResponse>;
  getChurchLanguage: handleUnaryCall<GetLanguagePayload, GetChurchLanguageResponse>;
  getCountry: handleUnaryCall<GetCountryPayload, GetCountryResponse>;
  getPoliticalState: handleUnaryCall<GetPoliticalStatePayload, GetPoliticalStateResponse>;
  getChurchState: handleUnaryCall<GetChurchStatePayload, GetChurchStateResponse>;
  getRegion: handleUnaryCall<GetRegionPayload, GetRegionResponse>;
  getGroup: handleUnaryCall<GetGroupPayload, GetGroupResponse>;
  getDistrict: handleUnaryCall<GetDistrictPayload, GetDistrictResponse>;
  getLga: handleUnaryCall<GetLGAPayload, GetLGAResponse>;
}

export interface LocationServiceClient extends Client {
  getZone(
    request: GetZonePayload,
    callback: (error: ServiceError | null, response: GetZoneResponse) => void,
  ): ClientUnaryCall;
  getZone(
    request: GetZonePayload,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetZoneResponse) => void,
  ): ClientUnaryCall;
  getZone(
    request: GetZonePayload,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetZoneResponse) => void,
  ): ClientUnaryCall;
  getLanguage(
    request: GetLanguagePayload,
    callback: (error: ServiceError | null, response: GetLanguageResponse) => void,
  ): ClientUnaryCall;
  getLanguage(
    request: GetLanguagePayload,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetLanguageResponse) => void,
  ): ClientUnaryCall;
  getLanguage(
    request: GetLanguagePayload,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetLanguageResponse) => void,
  ): ClientUnaryCall;
  getChurchLanguage(
    request: GetLanguagePayload,
    callback: (error: ServiceError | null, response: GetChurchLanguageResponse) => void,
  ): ClientUnaryCall;
  getChurchLanguage(
    request: GetLanguagePayload,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetChurchLanguageResponse) => void,
  ): ClientUnaryCall;
  getChurchLanguage(
    request: GetLanguagePayload,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetChurchLanguageResponse) => void,
  ): ClientUnaryCall;
  getCountry(
    request: GetCountryPayload,
    callback: (error: ServiceError | null, response: GetCountryResponse) => void,
  ): ClientUnaryCall;
  getCountry(
    request: GetCountryPayload,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetCountryResponse) => void,
  ): ClientUnaryCall;
  getCountry(
    request: GetCountryPayload,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetCountryResponse) => void,
  ): ClientUnaryCall;
  getPoliticalState(
    request: GetPoliticalStatePayload,
    callback: (error: ServiceError | null, response: GetPoliticalStateResponse) => void,
  ): ClientUnaryCall;
  getPoliticalState(
    request: GetPoliticalStatePayload,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetPoliticalStateResponse) => void,
  ): ClientUnaryCall;
  getPoliticalState(
    request: GetPoliticalStatePayload,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetPoliticalStateResponse) => void,
  ): ClientUnaryCall;
  getChurchState(
    request: GetChurchStatePayload,
    callback: (error: ServiceError | null, response: GetChurchStateResponse) => void,
  ): ClientUnaryCall;
  getChurchState(
    request: GetChurchStatePayload,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetChurchStateResponse) => void,
  ): ClientUnaryCall;
  getChurchState(
    request: GetChurchStatePayload,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetChurchStateResponse) => void,
  ): ClientUnaryCall;
  getRegion(
    request: GetRegionPayload,
    callback: (error: ServiceError | null, response: GetRegionResponse) => void,
  ): ClientUnaryCall;
  getRegion(
    request: GetRegionPayload,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetRegionResponse) => void,
  ): ClientUnaryCall;
  getRegion(
    request: GetRegionPayload,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetRegionResponse) => void,
  ): ClientUnaryCall;
  getGroup(
    request: GetGroupPayload,
    callback: (error: ServiceError | null, response: GetGroupResponse) => void,
  ): ClientUnaryCall;
  getGroup(
    request: GetGroupPayload,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetGroupResponse) => void,
  ): ClientUnaryCall;
  getGroup(
    request: GetGroupPayload,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetGroupResponse) => void,
  ): ClientUnaryCall;
  getDistrict(
    request: GetDistrictPayload,
    callback: (error: ServiceError | null, response: GetDistrictResponse) => void,
  ): ClientUnaryCall;
  getDistrict(
    request: GetDistrictPayload,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetDistrictResponse) => void,
  ): ClientUnaryCall;
  getDistrict(
    request: GetDistrictPayload,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetDistrictResponse) => void,
  ): ClientUnaryCall;
  getLga(
    request: GetLGAPayload,
    callback: (error: ServiceError | null, response: GetLGAResponse) => void,
  ): ClientUnaryCall;
  getLga(
    request: GetLGAPayload,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetLGAResponse) => void,
  ): ClientUnaryCall;
  getLga(
    request: GetLGAPayload,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetLGAResponse) => void,
  ): ClientUnaryCall;
}

export const LocationServiceClient = makeGenericClientConstructor(
  LocationServiceService,
  "location.LocationService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): LocationServiceClient;
  service: typeof LocationServiceService;
  serviceName: string;
};

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
