// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: src/proto/index.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export interface GetPoliticalStatePayload {
  id: string;
}

export interface GetPoliticalStateResponse {
  political_state?: PoliticalState | undefined;
}

export interface PoliticalState {
  id: string;
  name: string;
  country_id: string;
}

function createBaseGetPoliticalStatePayload(): GetPoliticalStatePayload {
  return { id: "" };
}

export const GetPoliticalStatePayload: MessageFns<GetPoliticalStatePayload> = {
  encode(message: GetPoliticalStatePayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPoliticalStatePayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPoliticalStatePayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetPoliticalStateResponse(): GetPoliticalStateResponse {
  return {};
}

export const GetPoliticalStateResponse: MessageFns<GetPoliticalStateResponse> = {
  encode(message: GetPoliticalStateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.political_state !== undefined) {
      PoliticalState.encode(message.political_state, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPoliticalStateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPoliticalStateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.political_state = PoliticalState.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBasePoliticalState(): PoliticalState {
  return { id: "", name: "", country_id: "" };
}

export const PoliticalState: MessageFns<PoliticalState> = {
  encode(message: PoliticalState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.country_id !== "") {
      writer.uint32(26).string(message.country_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PoliticalState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePoliticalState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.country_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface LocationServiceClient {
  getPoliticalState(request: GetPoliticalStatePayload): Observable<GetPoliticalStateResponse>;
}

export interface LocationServiceController {
  getPoliticalState(
    request: GetPoliticalStatePayload,
  ): Promise<GetPoliticalStateResponse> | Observable<GetPoliticalStateResponse> | GetPoliticalStateResponse;
}

export function LocationServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getPoliticalState"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("LocationService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("LocationService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const LOCATION_SERVICE_NAME = "LocationService";

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
